// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4729.FRC2019.subsystems;

import java.util.List;
import java.util.Arrays;
import java.util.stream.Collectors;

import org.usfirst.frc4729.FRC2019.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CAN;
import edu.wpi.first.wpilibj.SpeedController;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Drive extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public double kp = 1; //poportionalised
    public double ki = 9; //interagal
    public double kd = 7; //differental
    public double kf = 3;
    public int izone = 5; //encoder ticks / analog units
    public double rampate = 6; //volts/second - a guess of 6
    public int profile = 0; //0 or 1

    private CAN leftFrontMotor;
    private CAN rightFrontMotor;
    private CAN leftBackMotor;
    private CAN rightBackMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Drive() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        leftFrontMotor = new PWMTalonSRX(0);
        addChild("LeftFrontMotor",leftFrontMotor);
        leftFrontMotor.setInverted(false);
        
        rightFrontMotor = new PWMTalonSRX(2);
        addChild("RightFrontMotor",rightFrontMotor);
        rightFrontMotor.setInverted(false);
        
        leftBackMotor = new PWMTalonSRX(4);
        addChild("leftBackMotor",leftBackMotor);
        leftBackMotor.setInverted(false);
        
        rightBackMotor = new PWMTalonSRX(5);
        addChild("rightBackMotor",rightBackMotor);
        rightBackMotor.setInverted(false);
        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }
    
    public void omni(double forwards, double sideways, double turn) {
        List<Double> power = Arrays.asList(forwards + sideways + turn,  // leftFront
                                           forwards - sideways + turn,  // leftBack
                                          -forwards + sideways + turn,  // rightFront
                                          -forwards - sideways + turn); // rightBack
                                          
        double max = power.stream().map(p -> Math.abs(p)).max((a, b) -> {
            Double difference = a - b;
            return difference.intValue();
        }).get();

        if (max > 1) {
            power = power.stream().map(p -> p / max).collect(Collectors.toList());
        }

        setMotors(power.get(0).doubleValue(),
                  power.get(1).doubleValue(),
                  power.get(2).doubleValue(),
                  power.get(3).doubleValue());
    }

    public void setMotors(double leftFront, double leftBack, double rightFront, double rightBack) {
        leftFrontMotor.set(leftFront);
        leftBackMotor.set(leftBack);
        rightFrontMotor.set(rightFront);
        rightBackMotor.set(rightBack);
    }

    public void control () {
        leftFrontMotor.setPID(kp,ki,kd,kf,izone,rampate,profile);
        leftBackMotor.setPID(kp,ki,kd,kf,izone,rampate,profile);
        rightFrontMotor.setPID(kp,ki,kd,kf,izone,rampate,profile);
        rightBackMotor.setPID(kp,ki,kd,kf,izone,rampate,profile);
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

