// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4729.FRC2019;

import org.usfirst.frc4729.FRC2019.commands.*;
import org.usfirst.frc4729.FRC2019.subsystems.Mechanism;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.DriverStation.MatchType;
import edu.wpi.first.wpilibj.GenericHID.RumbleType;
import edu.wpi.first.wpilibj.buttons.Button;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.DriverStation;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // public Joystick leftStick = new Joystick(0);
    // public Joystick rightStick = new Joystick(1);
    public XboxController controller = new XboxController(0);

    // public Button leftButton3;
    // public Button leftButton2;

    // public Button rightButton3;
    // public Button rightButton2;
    // public Button rightTrigger;
    // public Button rightButton11;

    public Button x;
    public Button start;
    public Button back;
    public Button rb;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        boolean actualMatch = (DriverStation.getInstance().getMatchType() != MatchType.None);

        if (actualMatch || controller.getName().length() > 0) {
            x     = new JoystickButton(controller, 3);
            start = new JoystickButton(controller, 8);
            back  = new JoystickButton(controller, 7);
            rb    = new JoystickButton(controller, 6);

            x.whenPressed(new Eject());
            start.whenPressed(new TeleopAutomagic());
            back.whenPressed(new CancelTeleopAutomagic());
            rb.whenPressed(new ToggleSlowMode());
        }

        // if (actualMatch || leftStick.getName().length() > 0) {
        //     leftButton3 = new JoystickButton(leftStick, 3);
        //     leftButton2 = new JoystickButton(leftStick, 2);
        //     leftButton3.whenPressed(new TeleopAutomagic());
        //     leftButton2.whenPressed(new CancelTeleopAutomagic());
        // }

        // if (actualMatch || rightStick.getName().length() > 0) {
        //     rightButton3 = new JoystickButton(rightStick, 3);
        //     rightButton2 = new JoystickButton(rightStick, 2);
        //     rightTrigger = new JoystickButton(rightStick, 1);
        //     rightButton11 = new JoystickButton(rightStick, 11);

        //     rightButton3.whenPressed(new WinchUp());
        //     rightButton2.whenPressed(new WinchDown());
        //     rightTrigger.whenPressed(new Eject());
        //     rightButton11.whenPressed(new CalibrateWinch());
        // }
    }
}
